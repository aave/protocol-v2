import { task } from 'hardhat/config';
import {
  getATokensAndRatesHelper,
  getDeployVaultHelper,
  getLendingPoolAddressesProvider,
} from '../../helpers/contracts-getters';
import { insertContractAddressInDb } from '../../helpers/contracts-helpers';
import { waitForTx } from '../../helpers/misc-utils';
import { eContractid } from '../../helpers/types';

task('sturdy:ftm:deployVaultHelper', 'Deploy vault')
  .addFlag('verify', 'Verify contracts at Etherscan')
  .setAction(async ({ verify }, DRE) => {
    await DRE.run('set-DRE');

    const vaultHelper = await getDeployVaultHelper();
    const aTokenHelper = await getATokensAndRatesHelper();
    const addressProvider = await getLendingPoolAddressesProvider();
    const _treasuryAddress = '0xFd1D36995d76c0F75bbe4637C84C06E4A68bBB3a';
    const _treasuryFee = 1000;
    const _aTokenHelper = aTokenHelper.address;

    // transfer owner to vaule helper contract for deploying new vault
    await waitForTx(await addressProvider.transferOwnership(vaultHelper.address));
    await waitForTx(await aTokenHelper.transferOwnership(vaultHelper.address));

    // // mooTOMB_MIMATIC reserve
    // {
    //   // Run deployVault using the above param
    //   // The following params are generated by running this command but only for forked mainnet, when deploy mainnet, need to change command including network
    //   // yarn hardhat external:get-param-for-new-vault --pool Fantom --symbol mooTOMB_MIMATIC --network ftm/ftm_test
    //   await waitForTx(
    //     await vaultHelper.deployVault(
    //       [
    //         '0x42454546595f544f4d425f4d494d415449435f5641554c540000000000000000',   // 'BEEFY_TOMB_MIMATIC_VAULT'
    //         '0x6d6f6f546f6d62544f4d422d4d494d4154494300000000000000000000000000',   // 'mooTombTOMB-MIMATIC'
    //         '0x544f4d425f4d494d415449435f4c500000000000000000000000000000000000',   // 'TOMB_MIMATIC_LP'
    //         '0x4d494d4154494300000000000000000000000000000000000000000000000000',   // 'MIMATIC'
    //         '0x5553444300000000000000000000000000000000000000000000000000000000',   // 'USDC'
    //         '0x746f6d6253776170526f75746572000000000000000000000000000000000000'    // 'tombSwapRouter'
    //       ],
    //       [
    //         '0xb2be5Cd33DBFf412Bce9587E44b5647a4BdA6a66',     // vault implement address (BEEFY_TOMB_MIMATIC_VAULT)
    //         '0xb2be5Cd33DBFf412Bce9587E44b5647a4BdA6a66',     // internal asset address (mooTombTOMB-MIMATIC)
    //         '0x45f4682B560d4e3B8FF1F1b3A38FDBe775C7177b',     // exterenal asset address (TOMB_MIMATIC_LP)
    //         '0xfB98B335551a418cD0737375a2ea0ded62Ea213b',     // MIMATIC address
    //         '0x04068DA6C83AFCFA0e13ba15A6696662335D5B75',     // USDC address
    //         '0x6D0176C5ea1e44b08D3dd001b0784cE42F47a3A7'      // TombSwapRouter address
    //       ],
    //       _treasuryAddress,
    //       _treasuryFee,
    //       _aTokenHelper,
    //       [
    //         {
    //           asset: '0xb2be5Cd33DBFf412Bce9587E44b5647a4BdA6a66',
    //           baseLTV: '0',
    //           liquidationThreshold: '7500',
    //           liquidationBonus: '10750',
    //           reserveFactor: '0',
    //           stableBorrowingEnabled: false,
    //           borrowingEnabled: false,
    //           collateralEnabled: true
    //         }
    //       ],
    //       [
    //         {
    //           aTokenImpl: '0x9787bDC2Ff7F39Ff981ecc347DfAcF6D57b8783E',
    //           stableDebtTokenImpl: '0x56045D514799074E474ee0AC9508162202f62d32',
    //           variableDebtTokenImpl: '0x95455A00338E046D6b1D180b46d8Bf3597258206',
    //           underlyingAssetDecimals: '18',
    //           interestRateStrategyAddress: rates.address,
    //           yieldAddress: '0x0000000000000000000000000000000000000000',
    //           underlyingAsset: '0xb2be5Cd33DBFf412Bce9587E44b5647a4BdA6a66',
    //           treasury: '0xFd1D36995d76c0F75bbe4637C84C06E4A68bBB3a',
    //           incentivesController: '0xcdA2B5Cd654be0DBA19E4064c583642741712560',
    //           underlyingAssetName: 'mooTOMB_MIMATIC',
    //           aTokenName: 'Sturdy interest bearing mooTOMB_MIMATIC',
    //           aTokenSymbol: 'smooTOMB_MIMATIC',
    //           variableDebtTokenName: 'Sturdy variable debt bearing mooTOMB_MIMATIC',
    //           variableDebtTokenSymbol: 'variableDebtmooTOMB_MIMATIC',
    //           stableDebtTokenName: 'Sturdy stable debt bearing mooTOMB_MIMATIC',
    //           stableDebtTokenSymbol: 'stableDebtmooTOMB_MIMATIC',
    //           params: '0x10'
    //         }
    //       ]
    //     )
    //   );

    //   // saving the newly created contract address
    //   const newVaultProxyAddress = await addressProvider.getAddress(
    //     '0x42454546595f544f4d425f4d494d415449435f5641554c540000000000000000'
    //   );
    //   await insertContractAddressInDb(eContractid.TombMiMaticBeefyVault, newVaultProxyAddress);
    // }

    // mooBASED_MIMATIC reserve
    {
      // Run deployVault using the above param
      // The following params are generated by running this command but only for forked mainnet, when deploy mainnet, need to change command including network
      // yarn hardhat external:get-param-for-new-vault --pool Fantom --symbol mooBASED_MIMATIC --network ftm/ftm_test
      await waitForTx(
        await vaultHelper.deployVault(
          [
            '0x42454546595f42415345445f4d494d415449435f5641554c5400000000000000', // 'BEEFY_BASED_MIMATIC_VAULT'
            '0x6d6f6f546f6d6242415345442d4d494d41544943000000000000000000000000', // 'mooTombBASED-MIMATIC'
            '0x42415345445f4d494d415449435f4c5000000000000000000000000000000000', // 'BASED_MIMATIC_LP'
            '0x4241534544000000000000000000000000000000000000000000000000000000', // 'BASED'
          ],
          [
            '0x21d7D4B68b766Ff2508b53EBaa928b9CC581e506', // vault implement address (BEEFY_BASED_MIMATIC_VAULT)
            '0x316C7c7e783A1d91806A069cF91aA048FD4a86dC', // internal asset address (mooTombBASED-MIMATIC)
            '0x323b65bC4F76b36AB57EAF4cFBD9561cfaAe5d29', // exterenal asset address (BASED_MIMATIC_LP)
            '0xD5868d9D96eFD744f4b0579C74Abdb26697E9AB2', // BASED address
          ],
          _treasuryAddress,
          _treasuryFee,
          _aTokenHelper,
          [
            {
              asset: '0x316C7c7e783A1d91806A069cF91aA048FD4a86dC',
              baseLTV: '7000',
              liquidationThreshold: '7500',
              liquidationBonus: '10750',
              reserveFactor: '0',
              stableBorrowingEnabled: false,
              borrowingEnabled: false,
              collateralEnabled: true,
            },
          ],
          [
            {
              aTokenImpl: '0xbd6374566128fc1129e5f63fEEe73e8d8d1F84Eb',
              stableDebtTokenImpl: '0x6A0e35E60e3E79c38Bb88C384Ae17e9218ad9CD4',
              variableDebtTokenImpl: '0xcd9C4C8b1f3FEB11C261A65310c2eBe453Dd822A',
              underlyingAssetDecimals: '18',
              interestRateStrategyAddress: '0x007AAe40561ba9aBA3B2c2DA7D078CB8e16a1c13',
              yieldAddress: '0x0000000000000000000000000000000000000000',
              underlyingAsset: '0x316C7c7e783A1d91806A069cF91aA048FD4a86dC',
              treasury: '0xFd1D36995d76c0F75bbe4637C84C06E4A68bBB3a',
              incentivesController: '0xe8257438ea046A3f5f246c862Efd8c96AD82289a',
              underlyingAssetName: 'mooBASED_MIMATIC',
              aTokenName: 'Sturdy interest bearing mooBASED_MIMATIC',
              aTokenSymbol: 'smooBASED_MIMATIC',
              variableDebtTokenName: 'Sturdy variable debt bearing mooBASED_MIMATIC',
              variableDebtTokenSymbol: 'variableDebtmooBASED_MIMATIC',
              stableDebtTokenName: 'Sturdy stable debt bearing mooBASED_MIMATIC',
              stableDebtTokenSymbol: 'stableDebtmooBASED_MIMATIC',
              params: '0x10',
            },
          ]
        )
      );

      // saving the newly created contract address
      const newVaultProxyAddress = await addressProvider.getAddress(
        '0x42454546595f42415345445f4d494d415449435f5641554c5400000000000000'
      );
      await insertContractAddressInDb(eContractid.BasedMiMaticBeefyVault, newVaultProxyAddress);
    }

    console.log(await addressProvider.owner());
    console.log(await aTokenHelper.owner());
  });
