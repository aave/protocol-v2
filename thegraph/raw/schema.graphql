type Protocol @entity {
  # just 1 for now
  id: ID!
  pools: [Pool!]! @derivedFrom(field: "protocol")
}

# service entity, when we receiving an event we should wknow which pool is it
type ContractToPoolMapping @entity {
  # contract address
  id: ID!
  pool: Pool!
}

type PoolConfigurationHistoryItem @entity {
  """tx hash"""  # TODO: replace with blockNumber/timestamp + blockPosition
  id: ID!
  pool: Pool!
  lendingPool: Bytes
  lendingPoolCore: Bytes
  lendingPoolParametersProvider: Bytes
  lendingPoolManager: Bytes
  lendingPoolConfigurator: Bytes
  lendingPoolLiquidationManager: Bytes
  lendingPoolDataProvider: Bytes
  proxyPriceProvider: Bytes
  lendingRateOracle: Bytes
  feeProvider: Bytes
  timestamp: Int!
}
type Pool @entity {
  id: ID!
  protocol: Protocol!
  lendingPool: Bytes
  lendingPoolCore: Bytes
  lendingPoolParametersProvider: Bytes
  lendingPoolManager: Bytes
  lendingPoolConfigurator: Bytes
  lendingPoolLiquidationManager: Bytes
  lendingPoolDataProvider: Bytes
  proxyPriceProvider: Bytes
  lendingRateOracle: Bytes
  feeProvider: Bytes
  history: [PoolConfigurationHistoryItem!]!  @derivedFrom(field: "pool")
  lastUpdateTimestamp: Int!

  reserves: [Reserve!]! @derivedFrom(field: "pool")
  depositHistory: [Deposit!]! @derivedFrom(field: "pool")
  redeemUnderlyingHistory: [RedeemUnderlying!]! @derivedFrom(field: "pool")
  borrowHistory: [Borrow!]! @derivedFrom(field: "pool")
  swapHistory: [Swap!]! @derivedFrom(field: "pool")
  usageAsCollateralHistory: [UsageAsCollateral!]! @derivedFrom(field: "pool")
  rebalanceStableBorrowRateHistory: [RebalanceStableBorrowRate!]! @derivedFrom(field: "pool")
  repayHistory: [Repay!]! @derivedFrom(field: "pool")
  flashLoanHistory: [FlashLoan!]! @derivedFrom(field: "pool")
  liquidationCallHistory: [LiquidationCall!]! @derivedFrom(field: "pool")
  originationFeeLiquidationHistory: [OriginationFeeLiquidation!]! @derivedFrom(field: "pool")
}

type PriceHistoryItem @entity {
  id: ID!
  asset: PriceOracleAsset!
  price: BigInt!
  timestamp: Int!
}

type UsdEthPriceHistoryItem @entity {
  id: ID!
  oracle: PriceOracle!
  price: BigInt!
  timestamp: Int!
}

type ChainlinkAggregator @entity {
  # aggregator address
  id: ID!
  oracleAsset: PriceOracleAsset!
}

enum PriceOracleAssetType {
  Simple
  Composite
}

enum PriceOracleAssetPlatform {
  Simple
  Uniswap
}

type PriceOracleAsset @entity {
  # underlying asset address
  id: ID!
  oracle: PriceOracle!
  priceInEth: BigInt!
  priceSource: Bytes!
  isFallbackRequired: Boolean!
  type: PriceOracleAssetType!
  platform: PriceOracleAssetPlatform!
  dependentAssets: [PriceOracleAsset!]!
  lastUpdateTimestamp: Int!
  priceHistory: [PriceHistoryItem!]! @derivedFrom(field: "asset")
  fromChainlinkSourcesRegistry: Boolean!
}

type PriceOracle @entity {
  id: ID!
  proxyPriceProvider: Bytes!
  usdPriceEth: BigInt!
  usdPriceEthMainSource: Bytes!
  usdPriceEthFallbackRequired: Boolean!
  fallbackPriceOracle: Bytes!
  tokens: [PriceOracleAsset!]! @derivedFrom(field: "oracle")
  usdPriceEthHistory: [UsdEthPriceHistoryItem!]! @derivedFrom(field: "oracle")
  tokensWithFallback: [PriceOracleAsset!]!
  lastUpdateTimestamp: Int!
}

type AToken @entity {
  """AToken address"""
  id: ID!
  pool: Pool!
  underlyingAssetAddress: Bytes!
  underlyingAssetDecimals: Int!
}

enum BorrowRateMode {
  None
  Stable
  Variable
}

type Referrer @entity {
  id: ID!
  deposits: [Deposit!]! @derivedFrom(field: "referrer")
  borrows: [Borrow!]! @derivedFrom(field: "referrer")
}

interface UserTransaction {
  id: ID!
  pool: Pool!
  user: User!
  timestamp: Int!
}

type Deposit implements UserTransaction @entity {
  """tx hash"""  # TODO: replace with blockNumber/timestamp + blockPosition
  id: ID!
  pool: Pool!
  user: User!
  reserve: Reserve!
  userReserve: UserReserve!
  amount: BigInt!
  referrer: Referrer
  timestamp: Int!
}

type RedeemUnderlying implements UserTransaction @entity {
  """tx hash"""  # TODO: replace with blockNumber/timestamp + blockPosition
  id: ID!
  pool: Pool!
  user: User!
  reserve: Reserve!
  userReserve: UserReserve!
  amount: BigInt!
  timestamp: Int!
}

type Borrow implements UserTransaction @entity {
  """tx hash"""  # TODO: replace with blockNumber/timestamp + blockPosition
  id: ID!
  pool: Pool!
  user: User!
  reserve: Reserve!
  userReserve: UserReserve!
  amount: BigInt!
  borrowRate: BigInt!
  borrowRateMode: BorrowRateMode!
  accruedBorrowInterest: BigInt!
  referrer: Referrer
  timestamp: Int!
}

type Swap implements UserTransaction @entity {
  """tx hash"""  # TODO: replace with blockNumber/timestamp + blockPosition
  id: ID!
  pool: Pool!
  user: User!
  reserve: Reserve!
  userReserve: UserReserve!
  borrowRateFrom: BigInt!
  borrowRateModeFrom: BorrowRateMode!
  borrowRateTo: BigInt!
  borrowRateModeTo: BorrowRateMode!
  accruedBorrowInterest: BigInt!
  timestamp: Int!
}

type UsageAsCollateral implements UserTransaction @entity {
  """tx hash"""  # TODO: replace with blockNumber/timestamp + blockPosition
  id: ID!
  pool: Pool!
  user: User!
  reserve: Reserve!
  userReserve: UserReserve!
  fromState: Boolean!
  toState: Boolean!
  timestamp: Int!
}

type RebalanceStableBorrowRate implements UserTransaction @entity {
  """tx hash"""  # TODO: replace with blockNumber/timestamp + blockPosition
  id: ID!
  pool: Pool!
  user: User!
  reserve: Reserve!
  userReserve: UserReserve!
  borrowRateFrom: BigInt!
  borrowRateTo: BigInt!
  accruedBorrowInterest: BigInt!
  timestamp: Int!
}

type Repay implements UserTransaction @entity {
  """tx hash"""  # TODO: replace with blockNumber/timestamp + blockPosition
  id: ID!
  pool: Pool!
  user: User!
  reserve: Reserve!
  userReserve: UserReserve!
  amountAfterFee: BigInt!
  fee: BigInt!
  timestamp: Int!
}

type FlashLoan @entity {
  """tx hash"""  # TODO: replace with blockNumber/timestamp + blockPosition
  id: ID!
  pool: Pool!
  reserve: Reserve!
  target: Bytes!
  amount: BigInt!
  totalFee: BigInt!
  protocolFee: BigInt!
  timestamp: Int!
}

type LiquidationCall implements UserTransaction @entity {
  """tx hash"""  # TODO: replace with blockNumber/timestamp + blockPosition
  id: ID!
  pool: Pool!
  user: User!
  collateralReserve: Reserve!
  collateralUserReserve: UserReserve!
  collateralAmount: BigInt!
  principalReserve: Reserve!
  principalUserReserve: UserReserve!
  principalAmount: BigInt!
  liquidator: Bytes!
  timestamp: Int!
}

type OriginationFeeLiquidation implements UserTransaction @entity {
  """tx hash"""  # TODO: replace with blockNumber/timestamp + blockPosition
  id: ID!
  pool: Pool!
  user: User!
  collateralReserve: Reserve!
  collateralUserReserve: UserReserve!
  principalReserve: Reserve!
  principalUserReserve: UserReserve!
  feeLiquidated: BigInt!
  liquidatedCollateralForFee: BigInt!
  timestamp: Int!
}

type ReserveConfigurationHistoryItem @entity {
  """tx hash"""  # TODO: replace with blockNumber/timestamp + blockPosition
  id: ID!
  reserve: Reserve!
  usageAsCollateralEnabled: Boolean!
  borrowingEnabled: Boolean!
  stableBorrowRateEnabled: Boolean!
  isActive: Boolean!
  isFreezed: Boolean!
  reserveInterestRateStrategy: Bytes!
  baseLTVasCollateral: BigInt!
  reserveLiquidationThreshold: BigInt!
  reserveLiquidationBonus: BigInt!
  timestamp: Int!
}

type ReserveParamsHistoryItem @entity {
  """tx hash"""  # TODO: replace with blockNumber/timestamp + blockPosition
  id: ID!
  reserve: Reserve!
  variableBorrowRate: BigInt!
  variableBorrowIndex: BigInt!
  utilizationRate: BigDecimal!
  stableBorrowRate: BigInt!
  averageStableBorrowRate: BigInt!
  liquidityIndex: BigInt!
  liquidityRate: BigInt!
  totalLiquidity: BigInt!
  totalLiquidityAsCollateral: BigInt!
  availableLiquidity: BigInt!
  totalBorrows: BigInt!
  totalBorrowsVariable: BigInt!
  totalBorrowsStable: BigInt!
  priceInEth: BigInt!
  priceInUsd: BigDecimal!
  timestamp: Int!
}

type Reserve @entity {
  """Reserve address"""
  id: ID!
  underlyingAsset: Bytes!
  pool: Pool!
  symbol: String!
  name: String!
  #uiColor: String! #TODO MOVE: move to the frontend
  #currencyType: CurrencyType! #TODO MOVE: move to the frontend
  decimals: Int!
  usageAsCollateralEnabled: Boolean! # defalt false
  borrowingEnabled: Boolean! # defalt false
  stableBorrowRateEnabled: Boolean! # defalt false
  isActive: Boolean! # defalt false
  isFreezed: Boolean! # defalt false
  price: PriceOracleAsset!
  reserveInterestRateStrategy: Bytes!
  optimalUtilisationRate: BigInt!
  variableRateSlope1: BigInt!
  variableRateSlope2: BigInt!
  stableRateSlope1: BigInt!
  stableRateSlope2: BigInt!
  baseVariableBorrowRate: BigInt!
  baseLTVasCollateral: BigInt!
  reserveLiquidationThreshold: BigInt!
  reserveLiquidationBonus: BigInt!
  utilizationRate: BigDecimal! # default: 0
  totalLiquidity: BigInt!  # default: 0
  totalLiquidityAsCollateral: BigInt! # default: 0
  availableLiquidity: BigInt!  # default: 0
  totalBorrows: BigInt!  # default: 0
  totalBorrowsStable: BigInt!  # default: 0
  totalBorrowsVariable: BigInt!  # default: 0
  liquidityRate: BigInt! # depositors interest
  variableBorrowRate: BigInt!
  stableBorrowRate: BigInt!
  averageStableBorrowRate: BigInt!
  liquidityIndex: BigInt!
  variableBorrowIndex: BigInt!
  aToken: AToken!
  lastUpdateTimestamp: Int!

  lifetimeLiquidity: BigInt!  # default: 0
  lifetimeBorrows: BigInt!  # default: 0
  lifetimeBorrowsStable: BigInt!  # default: 0
  lifetimeBorrowsVariable: BigInt!  # default: 0
  lifetimeRepayments: BigInt!  # default: 0
  lifetimeWithdrawals: BigInt!  # default: 0
  lifetimeLiquidated: BigInt!  # default: 0
  lifetimeFeeOriginated: BigInt!  # default: 0
  lifetimeFeeCollected: BigInt!  # default: 0
  lifetimeFlashLoans: BigInt!  # default: 0
  lifetimeFlashloanDepositorsFee: BigInt!  # default: 0
  lifetimeFlashloanProtocolFee: BigInt!  # default: 0

  userReserves: [UserReserve!]! @derivedFrom(field: "reserve")
  depositHistory: [Deposit!]! @derivedFrom(field: "reserve")
  redeemUnderlyingHistory: [RedeemUnderlying!]! @derivedFrom(field: "reserve")
  borrowHistory: [Borrow!]! @derivedFrom(field: "reserve")
  usageAsCollateralHistory: [UsageAsCollateral!]! @derivedFrom(field: "reserve")
  swapHistory: [Swap!]! @derivedFrom(field: "reserve")
  rebalanceStableBorrowRateHistory: [RebalanceStableBorrowRate!]! @derivedFrom(field: "reserve")
  repayHistory: [Repay!]! @derivedFrom(field: "reserve")
  flashLoanHistory: [FlashLoan!]! @derivedFrom(field: "reserve")
  liquidationCallHistory: [LiquidationCall!]! @derivedFrom(field: "collateralReserve")
  originationFeeLiquidationHistory: [OriginationFeeLiquidation!]! @derivedFrom(field: "collateralReserve")
  paramsHistory: [ReserveParamsHistoryItem!]!  @derivedFrom(field: "reserve")
  configurationHistory: [ReserveConfigurationHistoryItem!]! @derivedFrom(field: "reserve")
  deposits: [Deposit!]!  @derivedFrom(field: "reserve")
}

type ATokenBalanceHistoryItem @entity {
  """ userReserve + txHash """  # TODO: replace with blockNumber/timestamp + blockPosition
  id: ID!
  userReserve: UserReserve!
  balance: BigInt!
  userBalanceIndex: BigInt!
  interestRedirectionAddress: Bytes!
  redirectedBalance: BigInt!
  timestamp: Int!
}

type UserBorrowHistoryItem @entity {
  """ userReserve + txHash """ # TODO: replace with blockNumber/timestamp + blockPosition
  id: ID!
  userReserve: UserReserve!
  totalBorrows: BigInt!
  borrowRate: BigInt!
  borrowRateMode: BorrowRateMode!
  originationFee: BigInt!
  timestamp: Int!
}

type UserReserve @entity {
  """user address + reserve address"""
  id: ID!
  pool: Pool!
  reserve: Reserve!
  user: User!
  usageAsCollateralEnabledOnUser: Boolean!
  userBalanceIndex: BigInt!
  principalATokenBalance: BigInt!
  redirectedBalance: BigInt!
  interestRedirectionAddress: Bytes!
  interestRedirectionAllowance: Bytes!
  #principalDeposits: BigDecimal! # we should get rid of it, because of fields merge
  #totalDeposits: BigDecimal! # TODO: add, and also totalWithdrawals
  principalBorrows: BigInt!
  borrowRate: BigInt!
  borrowRateMode: BorrowRateMode!
  variableBorrowIndex: BigInt!
  """Amount in currency units included as fee"""
  originationFee: BigInt!
  lastUpdateTimestamp: Int!
  aTokenBalanceHistory: [ATokenBalanceHistoryItem!]! @derivedFrom(field: "userReserve")
  borrowStateHistory: [UserBorrowHistoryItem!]! @derivedFrom(field: "userReserve")

  usageAsCollateralHistory: [UsageAsCollateral!]! @derivedFrom(field: "userReserve")
  depositHistory: [Deposit!]! @derivedFrom(field: "userReserve")
  redeemUnderlyingHistory: [RedeemUnderlying!]! @derivedFrom(field: "userReserve")
  borrowHistory: [Borrow!]! @derivedFrom(field: "userReserve")
  swapHistory: [Swap!]! @derivedFrom(field: "userReserve")
  rebalanceStableBorrowRateHistory: [RebalanceStableBorrowRate!]! @derivedFrom(field: "userReserve")
  repayHistory: [Repay!]! @derivedFrom(field: "userReserve")
  liquidationCallHistory: [LiquidationCall!]! @derivedFrom(field: "collateralUserReserve")
  originationFeeLiquidationHistory: [OriginationFeeLiquidation!]! @derivedFrom(field: "collateralUserReserve")
}

type User @entity {
  """user address"""
  id: ID!
  borrowedReservesCount: Int!
  reserves: [UserReserve!]! @derivedFrom(field: "user")
  depositHistory: [Deposit!]! @derivedFrom(field: "user")
  redeemUnderlyingHistory: [RedeemUnderlying!]! @derivedFrom(field: "user")
  usageAsCollateralHistory: [UsageAsCollateral!]! @derivedFrom(field: "user")
  borrowHistory: [Borrow!]! @derivedFrom(field: "user")
  swapHistory: [Swap!]! @derivedFrom(field: "user")
  rebalanceStableBorrowRateHistory: [RebalanceStableBorrowRate!]! @derivedFrom(field: "user")
  repayHistory: [Repay!]! @derivedFrom(field: "user")
  liquidationCallHistory: [LiquidationCall!]! @derivedFrom(field: "user")
  originationFeeLiquidationHistory: [OriginationFeeLiquidation!]! @derivedFrom(field: "user")
}
