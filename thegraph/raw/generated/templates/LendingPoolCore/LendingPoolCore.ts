// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ReserveDataUpdated extends ethereum.Event {
  get params(): ReserveDataUpdated__Params {
    return new ReserveDataUpdated__Params(this);
  }
}

export class ReserveDataUpdated__Params {
  _event: ReserveDataUpdated;

  constructor(event: ReserveDataUpdated) {
    this._event = event;
  }

  get reserve(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get liquidityRate(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get stableBorrowRate(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get averageStableBorrowRate(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get variableBorrowRate(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get liquidityIndex(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get variableBorrowIndex(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class ReserveUpdated extends ethereum.Event {
  get params(): ReserveUpdated__Params {
    return new ReserveUpdated__Params(this);
  }
}

export class ReserveUpdated__Params {
  _event: ReserveUpdated;

  constructor(event: ReserveUpdated) {
    this._event = event;
  }

  get reserve(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get liquidityRate(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get stableBorrowRate(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get variableBorrowRate(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get liquidityIndex(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get variableBorrowIndex(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class LendingPoolCore__updateStateOnBorrowResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class LendingPoolCore__updateStateOnSwapRateResult {
  value0: i32;
  value1: BigInt;

  constructor(value0: i32, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set(
      "value0",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value0))
    );
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class LendingPoolCore__getUserBasicReserveDataResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: boolean;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt, value3: boolean) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromBoolean(this.value3));
    return map;
  }
}

export class LendingPoolCore__getReserveConfigurationResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: boolean;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt, value3: boolean) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromBoolean(this.value3));
    return map;
  }
}

export class LendingPoolCore__getUserBorrowBalancesResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class LendingPoolCore extends ethereum.SmartContract {
  static bind(address: Address): LendingPoolCore {
    return new LendingPoolCore("LendingPoolCore", address);
  }

  CORE_REVISION(): BigInt {
    let result = super.call("CORE_REVISION", "CORE_REVISION():(uint256)", []);

    return result[0].toBigInt();
  }

  try_CORE_REVISION(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "CORE_REVISION",
      "CORE_REVISION():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  addressesProvider(): Address {
    let result = super.call(
      "addressesProvider",
      "addressesProvider():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_addressesProvider(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "addressesProvider",
      "addressesProvider():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  lendingPoolAddress(): Address {
    let result = super.call(
      "lendingPoolAddress",
      "lendingPoolAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_lendingPoolAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "lendingPoolAddress",
      "lendingPoolAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  reservesList(param0: BigInt): Address {
    let result = super.call("reservesList", "reservesList(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_reservesList(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "reservesList",
      "reservesList(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  updateStateOnBorrow(
    _reserve: Address,
    _user: Address,
    _amountBorrowed: BigInt,
    _borrowFee: BigInt,
    _rateMode: i32
  ): LendingPoolCore__updateStateOnBorrowResult {
    let result = super.call(
      "updateStateOnBorrow",
      "updateStateOnBorrow(address,address,uint256,uint256,uint8):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(_reserve),
        ethereum.Value.fromAddress(_user),
        ethereum.Value.fromUnsignedBigInt(_amountBorrowed),
        ethereum.Value.fromUnsignedBigInt(_borrowFee),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_rateMode))
      ]
    );

    return new LendingPoolCore__updateStateOnBorrowResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_updateStateOnBorrow(
    _reserve: Address,
    _user: Address,
    _amountBorrowed: BigInt,
    _borrowFee: BigInt,
    _rateMode: i32
  ): ethereum.CallResult<LendingPoolCore__updateStateOnBorrowResult> {
    let result = super.tryCall(
      "updateStateOnBorrow",
      "updateStateOnBorrow(address,address,uint256,uint256,uint8):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(_reserve),
        ethereum.Value.fromAddress(_user),
        ethereum.Value.fromUnsignedBigInt(_amountBorrowed),
        ethereum.Value.fromUnsignedBigInt(_borrowFee),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_rateMode))
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new LendingPoolCore__updateStateOnBorrowResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  updateStateOnSwapRate(
    _reserve: Address,
    _user: Address,
    _principalBorrowBalance: BigInt,
    _compoundedBorrowBalance: BigInt,
    _balanceIncrease: BigInt,
    _currentRateMode: i32
  ): LendingPoolCore__updateStateOnSwapRateResult {
    let result = super.call(
      "updateStateOnSwapRate",
      "updateStateOnSwapRate(address,address,uint256,uint256,uint256,uint8):(uint8,uint256)",
      [
        ethereum.Value.fromAddress(_reserve),
        ethereum.Value.fromAddress(_user),
        ethereum.Value.fromUnsignedBigInt(_principalBorrowBalance),
        ethereum.Value.fromUnsignedBigInt(_compoundedBorrowBalance),
        ethereum.Value.fromUnsignedBigInt(_balanceIncrease),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_currentRateMode))
      ]
    );

    return new LendingPoolCore__updateStateOnSwapRateResult(
      result[0].toI32(),
      result[1].toBigInt()
    );
  }

  try_updateStateOnSwapRate(
    _reserve: Address,
    _user: Address,
    _principalBorrowBalance: BigInt,
    _compoundedBorrowBalance: BigInt,
    _balanceIncrease: BigInt,
    _currentRateMode: i32
  ): ethereum.CallResult<LendingPoolCore__updateStateOnSwapRateResult> {
    let result = super.tryCall(
      "updateStateOnSwapRate",
      "updateStateOnSwapRate(address,address,uint256,uint256,uint256,uint8):(uint8,uint256)",
      [
        ethereum.Value.fromAddress(_reserve),
        ethereum.Value.fromAddress(_user),
        ethereum.Value.fromUnsignedBigInt(_principalBorrowBalance),
        ethereum.Value.fromUnsignedBigInt(_compoundedBorrowBalance),
        ethereum.Value.fromUnsignedBigInt(_balanceIncrease),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_currentRateMode))
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new LendingPoolCore__updateStateOnSwapRateResult(
        value[0].toI32(),
        value[1].toBigInt()
      )
    );
  }

  updateStateOnRebalance(
    _reserve: Address,
    _user: Address,
    _balanceIncrease: BigInt
  ): BigInt {
    let result = super.call(
      "updateStateOnRebalance",
      "updateStateOnRebalance(address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_reserve),
        ethereum.Value.fromAddress(_user),
        ethereum.Value.fromUnsignedBigInt(_balanceIncrease)
      ]
    );

    return result[0].toBigInt();
  }

  try_updateStateOnRebalance(
    _reserve: Address,
    _user: Address,
    _balanceIncrease: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "updateStateOnRebalance",
      "updateStateOnRebalance(address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_reserve),
        ethereum.Value.fromAddress(_user),
        ethereum.Value.fromUnsignedBigInt(_balanceIncrease)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getUserBasicReserveData(
    _reserve: Address,
    _user: Address
  ): LendingPoolCore__getUserBasicReserveDataResult {
    let result = super.call(
      "getUserBasicReserveData",
      "getUserBasicReserveData(address,address):(uint256,uint256,uint256,bool)",
      [ethereum.Value.fromAddress(_reserve), ethereum.Value.fromAddress(_user)]
    );

    return new LendingPoolCore__getUserBasicReserveDataResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBoolean()
    );
  }

  try_getUserBasicReserveData(
    _reserve: Address,
    _user: Address
  ): ethereum.CallResult<LendingPoolCore__getUserBasicReserveDataResult> {
    let result = super.tryCall(
      "getUserBasicReserveData",
      "getUserBasicReserveData(address,address):(uint256,uint256,uint256,bool)",
      [ethereum.Value.fromAddress(_reserve), ethereum.Value.fromAddress(_user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new LendingPoolCore__getUserBasicReserveDataResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBoolean()
      )
    );
  }

  isUserAllowedToBorrowAtStable(
    _reserve: Address,
    _user: Address,
    _amount: BigInt
  ): boolean {
    let result = super.call(
      "isUserAllowedToBorrowAtStable",
      "isUserAllowedToBorrowAtStable(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_reserve),
        ethereum.Value.fromAddress(_user),
        ethereum.Value.fromUnsignedBigInt(_amount)
      ]
    );

    return result[0].toBoolean();
  }

  try_isUserAllowedToBorrowAtStable(
    _reserve: Address,
    _user: Address,
    _amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isUserAllowedToBorrowAtStable",
      "isUserAllowedToBorrowAtStable(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_reserve),
        ethereum.Value.fromAddress(_user),
        ethereum.Value.fromUnsignedBigInt(_amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getUserUnderlyingAssetBalance(_reserve: Address, _user: Address): BigInt {
    let result = super.call(
      "getUserUnderlyingAssetBalance",
      "getUserUnderlyingAssetBalance(address,address):(uint256)",
      [ethereum.Value.fromAddress(_reserve), ethereum.Value.fromAddress(_user)]
    );

    return result[0].toBigInt();
  }

  try_getUserUnderlyingAssetBalance(
    _reserve: Address,
    _user: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getUserUnderlyingAssetBalance",
      "getUserUnderlyingAssetBalance(address,address):(uint256)",
      [ethereum.Value.fromAddress(_reserve), ethereum.Value.fromAddress(_user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getReserveInterestRateStrategyAddress(_reserve: Address): Address {
    let result = super.call(
      "getReserveInterestRateStrategyAddress",
      "getReserveInterestRateStrategyAddress(address):(address)",
      [ethereum.Value.fromAddress(_reserve)]
    );

    return result[0].toAddress();
  }

  try_getReserveInterestRateStrategyAddress(
    _reserve: Address
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getReserveInterestRateStrategyAddress",
      "getReserveInterestRateStrategyAddress(address):(address)",
      [ethereum.Value.fromAddress(_reserve)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getReserveATokenAddress(_reserve: Address): Address {
    let result = super.call(
      "getReserveATokenAddress",
      "getReserveATokenAddress(address):(address)",
      [ethereum.Value.fromAddress(_reserve)]
    );

    return result[0].toAddress();
  }

  try_getReserveATokenAddress(_reserve: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getReserveATokenAddress",
      "getReserveATokenAddress(address):(address)",
      [ethereum.Value.fromAddress(_reserve)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getReserveAvailableLiquidity(_reserve: Address): BigInt {
    let result = super.call(
      "getReserveAvailableLiquidity",
      "getReserveAvailableLiquidity(address):(uint256)",
      [ethereum.Value.fromAddress(_reserve)]
    );

    return result[0].toBigInt();
  }

  try_getReserveAvailableLiquidity(
    _reserve: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getReserveAvailableLiquidity",
      "getReserveAvailableLiquidity(address):(uint256)",
      [ethereum.Value.fromAddress(_reserve)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getReserveTotalLiquidity(_reserve: Address): BigInt {
    let result = super.call(
      "getReserveTotalLiquidity",
      "getReserveTotalLiquidity(address):(uint256)",
      [ethereum.Value.fromAddress(_reserve)]
    );

    return result[0].toBigInt();
  }

  try_getReserveTotalLiquidity(_reserve: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getReserveTotalLiquidity",
      "getReserveTotalLiquidity(address):(uint256)",
      [ethereum.Value.fromAddress(_reserve)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getReserveNormalizedIncome(_reserve: Address): BigInt {
    let result = super.call(
      "getReserveNormalizedIncome",
      "getReserveNormalizedIncome(address):(uint256)",
      [ethereum.Value.fromAddress(_reserve)]
    );

    return result[0].toBigInt();
  }

  try_getReserveNormalizedIncome(
    _reserve: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getReserveNormalizedIncome",
      "getReserveNormalizedIncome(address):(uint256)",
      [ethereum.Value.fromAddress(_reserve)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getReserveTotalBorrows(_reserve: Address): BigInt {
    let result = super.call(
      "getReserveTotalBorrows",
      "getReserveTotalBorrows(address):(uint256)",
      [ethereum.Value.fromAddress(_reserve)]
    );

    return result[0].toBigInt();
  }

  try_getReserveTotalBorrows(_reserve: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getReserveTotalBorrows",
      "getReserveTotalBorrows(address):(uint256)",
      [ethereum.Value.fromAddress(_reserve)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getReserveTotalBorrowsStable(_reserve: Address): BigInt {
    let result = super.call(
      "getReserveTotalBorrowsStable",
      "getReserveTotalBorrowsStable(address):(uint256)",
      [ethereum.Value.fromAddress(_reserve)]
    );

    return result[0].toBigInt();
  }

  try_getReserveTotalBorrowsStable(
    _reserve: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getReserveTotalBorrowsStable",
      "getReserveTotalBorrowsStable(address):(uint256)",
      [ethereum.Value.fromAddress(_reserve)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getReserveTotalBorrowsVariable(_reserve: Address): BigInt {
    let result = super.call(
      "getReserveTotalBorrowsVariable",
      "getReserveTotalBorrowsVariable(address):(uint256)",
      [ethereum.Value.fromAddress(_reserve)]
    );

    return result[0].toBigInt();
  }

  try_getReserveTotalBorrowsVariable(
    _reserve: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getReserveTotalBorrowsVariable",
      "getReserveTotalBorrowsVariable(address):(uint256)",
      [ethereum.Value.fromAddress(_reserve)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getReserveLiquidationThreshold(_reserve: Address): BigInt {
    let result = super.call(
      "getReserveLiquidationThreshold",
      "getReserveLiquidationThreshold(address):(uint256)",
      [ethereum.Value.fromAddress(_reserve)]
    );

    return result[0].toBigInt();
  }

  try_getReserveLiquidationThreshold(
    _reserve: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getReserveLiquidationThreshold",
      "getReserveLiquidationThreshold(address):(uint256)",
      [ethereum.Value.fromAddress(_reserve)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getReserveLiquidationBonus(_reserve: Address): BigInt {
    let result = super.call(
      "getReserveLiquidationBonus",
      "getReserveLiquidationBonus(address):(uint256)",
      [ethereum.Value.fromAddress(_reserve)]
    );

    return result[0].toBigInt();
  }

  try_getReserveLiquidationBonus(
    _reserve: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getReserveLiquidationBonus",
      "getReserveLiquidationBonus(address):(uint256)",
      [ethereum.Value.fromAddress(_reserve)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getReserveCurrentVariableBorrowRate(_reserve: Address): BigInt {
    let result = super.call(
      "getReserveCurrentVariableBorrowRate",
      "getReserveCurrentVariableBorrowRate(address):(uint256)",
      [ethereum.Value.fromAddress(_reserve)]
    );

    return result[0].toBigInt();
  }

  try_getReserveCurrentVariableBorrowRate(
    _reserve: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getReserveCurrentVariableBorrowRate",
      "getReserveCurrentVariableBorrowRate(address):(uint256)",
      [ethereum.Value.fromAddress(_reserve)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getReserveCurrentStableBorrowRate(_reserve: Address): BigInt {
    let result = super.call(
      "getReserveCurrentStableBorrowRate",
      "getReserveCurrentStableBorrowRate(address):(uint256)",
      [ethereum.Value.fromAddress(_reserve)]
    );

    return result[0].toBigInt();
  }

  try_getReserveCurrentStableBorrowRate(
    _reserve: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getReserveCurrentStableBorrowRate",
      "getReserveCurrentStableBorrowRate(address):(uint256)",
      [ethereum.Value.fromAddress(_reserve)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getReserveCurrentAverageStableBorrowRate(_reserve: Address): BigInt {
    let result = super.call(
      "getReserveCurrentAverageStableBorrowRate",
      "getReserveCurrentAverageStableBorrowRate(address):(uint256)",
      [ethereum.Value.fromAddress(_reserve)]
    );

    return result[0].toBigInt();
  }

  try_getReserveCurrentAverageStableBorrowRate(
    _reserve: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getReserveCurrentAverageStableBorrowRate",
      "getReserveCurrentAverageStableBorrowRate(address):(uint256)",
      [ethereum.Value.fromAddress(_reserve)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getReserveCurrentLiquidityRate(_reserve: Address): BigInt {
    let result = super.call(
      "getReserveCurrentLiquidityRate",
      "getReserveCurrentLiquidityRate(address):(uint256)",
      [ethereum.Value.fromAddress(_reserve)]
    );

    return result[0].toBigInt();
  }

  try_getReserveCurrentLiquidityRate(
    _reserve: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getReserveCurrentLiquidityRate",
      "getReserveCurrentLiquidityRate(address):(uint256)",
      [ethereum.Value.fromAddress(_reserve)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getReserveLiquidityCumulativeIndex(_reserve: Address): BigInt {
    let result = super.call(
      "getReserveLiquidityCumulativeIndex",
      "getReserveLiquidityCumulativeIndex(address):(uint256)",
      [ethereum.Value.fromAddress(_reserve)]
    );

    return result[0].toBigInt();
  }

  try_getReserveLiquidityCumulativeIndex(
    _reserve: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getReserveLiquidityCumulativeIndex",
      "getReserveLiquidityCumulativeIndex(address):(uint256)",
      [ethereum.Value.fromAddress(_reserve)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getReserveVariableBorrowsCumulativeIndex(_reserve: Address): BigInt {
    let result = super.call(
      "getReserveVariableBorrowsCumulativeIndex",
      "getReserveVariableBorrowsCumulativeIndex(address):(uint256)",
      [ethereum.Value.fromAddress(_reserve)]
    );

    return result[0].toBigInt();
  }

  try_getReserveVariableBorrowsCumulativeIndex(
    _reserve: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getReserveVariableBorrowsCumulativeIndex",
      "getReserveVariableBorrowsCumulativeIndex(address):(uint256)",
      [ethereum.Value.fromAddress(_reserve)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getReserveConfiguration(
    _reserve: Address
  ): LendingPoolCore__getReserveConfigurationResult {
    let result = super.call(
      "getReserveConfiguration",
      "getReserveConfiguration(address):(uint256,uint256,uint256,bool)",
      [ethereum.Value.fromAddress(_reserve)]
    );

    return new LendingPoolCore__getReserveConfigurationResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBoolean()
    );
  }

  try_getReserveConfiguration(
    _reserve: Address
  ): ethereum.CallResult<LendingPoolCore__getReserveConfigurationResult> {
    let result = super.tryCall(
      "getReserveConfiguration",
      "getReserveConfiguration(address):(uint256,uint256,uint256,bool)",
      [ethereum.Value.fromAddress(_reserve)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new LendingPoolCore__getReserveConfigurationResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBoolean()
      )
    );
  }

  getReserveDecimals(_reserve: Address): BigInt {
    let result = super.call(
      "getReserveDecimals",
      "getReserveDecimals(address):(uint256)",
      [ethereum.Value.fromAddress(_reserve)]
    );

    return result[0].toBigInt();
  }

  try_getReserveDecimals(_reserve: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getReserveDecimals",
      "getReserveDecimals(address):(uint256)",
      [ethereum.Value.fromAddress(_reserve)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isReserveBorrowingEnabled(_reserve: Address): boolean {
    let result = super.call(
      "isReserveBorrowingEnabled",
      "isReserveBorrowingEnabled(address):(bool)",
      [ethereum.Value.fromAddress(_reserve)]
    );

    return result[0].toBoolean();
  }

  try_isReserveBorrowingEnabled(
    _reserve: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isReserveBorrowingEnabled",
      "isReserveBorrowingEnabled(address):(bool)",
      [ethereum.Value.fromAddress(_reserve)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isReserveUsageAsCollateralEnabled(_reserve: Address): boolean {
    let result = super.call(
      "isReserveUsageAsCollateralEnabled",
      "isReserveUsageAsCollateralEnabled(address):(bool)",
      [ethereum.Value.fromAddress(_reserve)]
    );

    return result[0].toBoolean();
  }

  try_isReserveUsageAsCollateralEnabled(
    _reserve: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isReserveUsageAsCollateralEnabled",
      "isReserveUsageAsCollateralEnabled(address):(bool)",
      [ethereum.Value.fromAddress(_reserve)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getReserveIsStableBorrowRateEnabled(_reserve: Address): boolean {
    let result = super.call(
      "getReserveIsStableBorrowRateEnabled",
      "getReserveIsStableBorrowRateEnabled(address):(bool)",
      [ethereum.Value.fromAddress(_reserve)]
    );

    return result[0].toBoolean();
  }

  try_getReserveIsStableBorrowRateEnabled(
    _reserve: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "getReserveIsStableBorrowRateEnabled",
      "getReserveIsStableBorrowRateEnabled(address):(bool)",
      [ethereum.Value.fromAddress(_reserve)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getReserveIsActive(_reserve: Address): boolean {
    let result = super.call(
      "getReserveIsActive",
      "getReserveIsActive(address):(bool)",
      [ethereum.Value.fromAddress(_reserve)]
    );

    return result[0].toBoolean();
  }

  try_getReserveIsActive(_reserve: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "getReserveIsActive",
      "getReserveIsActive(address):(bool)",
      [ethereum.Value.fromAddress(_reserve)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getReserveIsFreezed(_reserve: Address): boolean {
    let result = super.call(
      "getReserveIsFreezed",
      "getReserveIsFreezed(address):(bool)",
      [ethereum.Value.fromAddress(_reserve)]
    );

    return result[0].toBoolean();
  }

  try_getReserveIsFreezed(_reserve: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "getReserveIsFreezed",
      "getReserveIsFreezed(address):(bool)",
      [ethereum.Value.fromAddress(_reserve)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getReserveLastUpdate(_reserve: Address): BigInt {
    let result = super.call(
      "getReserveLastUpdate",
      "getReserveLastUpdate(address):(uint40)",
      [ethereum.Value.fromAddress(_reserve)]
    );

    return result[0].toBigInt();
  }

  try_getReserveLastUpdate(_reserve: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getReserveLastUpdate",
      "getReserveLastUpdate(address):(uint40)",
      [ethereum.Value.fromAddress(_reserve)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getReserveUtilizationRate(_reserve: Address): BigInt {
    let result = super.call(
      "getReserveUtilizationRate",
      "getReserveUtilizationRate(address):(uint256)",
      [ethereum.Value.fromAddress(_reserve)]
    );

    return result[0].toBigInt();
  }

  try_getReserveUtilizationRate(
    _reserve: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getReserveUtilizationRate",
      "getReserveUtilizationRate(address):(uint256)",
      [ethereum.Value.fromAddress(_reserve)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getReserves(): Array<Address> {
    let result = super.call("getReserves", "getReserves():(address[])", []);

    return result[0].toAddressArray();
  }

  try_getReserves(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall("getReserves", "getReserves():(address[])", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  isUserUseReserveAsCollateralEnabled(
    _reserve: Address,
    _user: Address
  ): boolean {
    let result = super.call(
      "isUserUseReserveAsCollateralEnabled",
      "isUserUseReserveAsCollateralEnabled(address,address):(bool)",
      [ethereum.Value.fromAddress(_reserve), ethereum.Value.fromAddress(_user)]
    );

    return result[0].toBoolean();
  }

  try_isUserUseReserveAsCollateralEnabled(
    _reserve: Address,
    _user: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isUserUseReserveAsCollateralEnabled",
      "isUserUseReserveAsCollateralEnabled(address,address):(bool)",
      [ethereum.Value.fromAddress(_reserve), ethereum.Value.fromAddress(_user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getUserOriginationFee(_reserve: Address, _user: Address): BigInt {
    let result = super.call(
      "getUserOriginationFee",
      "getUserOriginationFee(address,address):(uint256)",
      [ethereum.Value.fromAddress(_reserve), ethereum.Value.fromAddress(_user)]
    );

    return result[0].toBigInt();
  }

  try_getUserOriginationFee(
    _reserve: Address,
    _user: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getUserOriginationFee",
      "getUserOriginationFee(address,address):(uint256)",
      [ethereum.Value.fromAddress(_reserve), ethereum.Value.fromAddress(_user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getUserCurrentBorrowRateMode(_reserve: Address, _user: Address): i32 {
    let result = super.call(
      "getUserCurrentBorrowRateMode",
      "getUserCurrentBorrowRateMode(address,address):(uint8)",
      [ethereum.Value.fromAddress(_reserve), ethereum.Value.fromAddress(_user)]
    );

    return result[0].toI32();
  }

  try_getUserCurrentBorrowRateMode(
    _reserve: Address,
    _user: Address
  ): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "getUserCurrentBorrowRateMode",
      "getUserCurrentBorrowRateMode(address,address):(uint8)",
      [ethereum.Value.fromAddress(_reserve), ethereum.Value.fromAddress(_user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  getUserCurrentStableBorrowRate(_reserve: Address, _user: Address): BigInt {
    let result = super.call(
      "getUserCurrentStableBorrowRate",
      "getUserCurrentStableBorrowRate(address,address):(uint256)",
      [ethereum.Value.fromAddress(_reserve), ethereum.Value.fromAddress(_user)]
    );

    return result[0].toBigInt();
  }

  try_getUserCurrentStableBorrowRate(
    _reserve: Address,
    _user: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getUserCurrentStableBorrowRate",
      "getUserCurrentStableBorrowRate(address,address):(uint256)",
      [ethereum.Value.fromAddress(_reserve), ethereum.Value.fromAddress(_user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getUserBorrowBalances(
    _reserve: Address,
    _user: Address
  ): LendingPoolCore__getUserBorrowBalancesResult {
    let result = super.call(
      "getUserBorrowBalances",
      "getUserBorrowBalances(address,address):(uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(_reserve), ethereum.Value.fromAddress(_user)]
    );

    return new LendingPoolCore__getUserBorrowBalancesResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_getUserBorrowBalances(
    _reserve: Address,
    _user: Address
  ): ethereum.CallResult<LendingPoolCore__getUserBorrowBalancesResult> {
    let result = super.tryCall(
      "getUserBorrowBalances",
      "getUserBorrowBalances(address,address):(uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(_reserve), ethereum.Value.fromAddress(_user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new LendingPoolCore__getUserBorrowBalancesResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  getUserVariableBorrowCumulativeIndex(
    _reserve: Address,
    _user: Address
  ): BigInt {
    let result = super.call(
      "getUserVariableBorrowCumulativeIndex",
      "getUserVariableBorrowCumulativeIndex(address,address):(uint256)",
      [ethereum.Value.fromAddress(_reserve), ethereum.Value.fromAddress(_user)]
    );

    return result[0].toBigInt();
  }

  try_getUserVariableBorrowCumulativeIndex(
    _reserve: Address,
    _user: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getUserVariableBorrowCumulativeIndex",
      "getUserVariableBorrowCumulativeIndex(address,address):(uint256)",
      [ethereum.Value.fromAddress(_reserve), ethereum.Value.fromAddress(_user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getUserLastUpdate(_reserve: Address, _user: Address): BigInt {
    let result = super.call(
      "getUserLastUpdate",
      "getUserLastUpdate(address,address):(uint256)",
      [ethereum.Value.fromAddress(_reserve), ethereum.Value.fromAddress(_user)]
    );

    return result[0].toBigInt();
  }

  try_getUserLastUpdate(
    _reserve: Address,
    _user: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getUserLastUpdate",
      "getUserLastUpdate(address,address):(uint256)",
      [ethereum.Value.fromAddress(_reserve), ethereum.Value.fromAddress(_user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class DefaultCall extends ethereum.Call {
  get inputs(): DefaultCall__Inputs {
    return new DefaultCall__Inputs(this);
  }

  get outputs(): DefaultCall__Outputs {
    return new DefaultCall__Outputs(this);
  }
}

export class DefaultCall__Inputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class DefaultCall__Outputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _addressesProvider(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class UpdateStateOnDepositCall extends ethereum.Call {
  get inputs(): UpdateStateOnDepositCall__Inputs {
    return new UpdateStateOnDepositCall__Inputs(this);
  }

  get outputs(): UpdateStateOnDepositCall__Outputs {
    return new UpdateStateOnDepositCall__Outputs(this);
  }
}

export class UpdateStateOnDepositCall__Inputs {
  _call: UpdateStateOnDepositCall;

  constructor(call: UpdateStateOnDepositCall) {
    this._call = call;
  }

  get _reserve(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _user(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _isFirstDeposit(): boolean {
    return this._call.inputValues[3].value.toBoolean();
  }
}

export class UpdateStateOnDepositCall__Outputs {
  _call: UpdateStateOnDepositCall;

  constructor(call: UpdateStateOnDepositCall) {
    this._call = call;
  }
}

export class UpdateStateOnRedeemCall extends ethereum.Call {
  get inputs(): UpdateStateOnRedeemCall__Inputs {
    return new UpdateStateOnRedeemCall__Inputs(this);
  }

  get outputs(): UpdateStateOnRedeemCall__Outputs {
    return new UpdateStateOnRedeemCall__Outputs(this);
  }
}

export class UpdateStateOnRedeemCall__Inputs {
  _call: UpdateStateOnRedeemCall;

  constructor(call: UpdateStateOnRedeemCall) {
    this._call = call;
  }

  get _reserve(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _user(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _amountRedeemed(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _userRedeemedEverything(): boolean {
    return this._call.inputValues[3].value.toBoolean();
  }
}

export class UpdateStateOnRedeemCall__Outputs {
  _call: UpdateStateOnRedeemCall;

  constructor(call: UpdateStateOnRedeemCall) {
    this._call = call;
  }
}

export class UpdateStateOnFlashLoanCall extends ethereum.Call {
  get inputs(): UpdateStateOnFlashLoanCall__Inputs {
    return new UpdateStateOnFlashLoanCall__Inputs(this);
  }

  get outputs(): UpdateStateOnFlashLoanCall__Outputs {
    return new UpdateStateOnFlashLoanCall__Outputs(this);
  }
}

export class UpdateStateOnFlashLoanCall__Inputs {
  _call: UpdateStateOnFlashLoanCall;

  constructor(call: UpdateStateOnFlashLoanCall) {
    this._call = call;
  }

  get _reserve(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _availableLiquidityBefore(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _income(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _protocolFee(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class UpdateStateOnFlashLoanCall__Outputs {
  _call: UpdateStateOnFlashLoanCall;

  constructor(call: UpdateStateOnFlashLoanCall) {
    this._call = call;
  }
}

export class UpdateStateOnBorrowCall extends ethereum.Call {
  get inputs(): UpdateStateOnBorrowCall__Inputs {
    return new UpdateStateOnBorrowCall__Inputs(this);
  }

  get outputs(): UpdateStateOnBorrowCall__Outputs {
    return new UpdateStateOnBorrowCall__Outputs(this);
  }
}

export class UpdateStateOnBorrowCall__Inputs {
  _call: UpdateStateOnBorrowCall;

  constructor(call: UpdateStateOnBorrowCall) {
    this._call = call;
  }

  get _reserve(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _user(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _amountBorrowed(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _borrowFee(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _rateMode(): i32 {
    return this._call.inputValues[4].value.toI32();
  }
}

export class UpdateStateOnBorrowCall__Outputs {
  _call: UpdateStateOnBorrowCall;

  constructor(call: UpdateStateOnBorrowCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get value1(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class UpdateStateOnRepayCall extends ethereum.Call {
  get inputs(): UpdateStateOnRepayCall__Inputs {
    return new UpdateStateOnRepayCall__Inputs(this);
  }

  get outputs(): UpdateStateOnRepayCall__Outputs {
    return new UpdateStateOnRepayCall__Outputs(this);
  }
}

export class UpdateStateOnRepayCall__Inputs {
  _call: UpdateStateOnRepayCall;

  constructor(call: UpdateStateOnRepayCall) {
    this._call = call;
  }

  get _reserve(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _user(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _paybackAmountMinusFees(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _originationFeeRepaid(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _balanceIncrease(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _repaidWholeLoan(): boolean {
    return this._call.inputValues[5].value.toBoolean();
  }
}

export class UpdateStateOnRepayCall__Outputs {
  _call: UpdateStateOnRepayCall;

  constructor(call: UpdateStateOnRepayCall) {
    this._call = call;
  }
}

export class UpdateStateOnSwapRateCall extends ethereum.Call {
  get inputs(): UpdateStateOnSwapRateCall__Inputs {
    return new UpdateStateOnSwapRateCall__Inputs(this);
  }

  get outputs(): UpdateStateOnSwapRateCall__Outputs {
    return new UpdateStateOnSwapRateCall__Outputs(this);
  }
}

export class UpdateStateOnSwapRateCall__Inputs {
  _call: UpdateStateOnSwapRateCall;

  constructor(call: UpdateStateOnSwapRateCall) {
    this._call = call;
  }

  get _reserve(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _user(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _principalBorrowBalance(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _compoundedBorrowBalance(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _balanceIncrease(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _currentRateMode(): i32 {
    return this._call.inputValues[5].value.toI32();
  }
}

export class UpdateStateOnSwapRateCall__Outputs {
  _call: UpdateStateOnSwapRateCall;

  constructor(call: UpdateStateOnSwapRateCall) {
    this._call = call;
  }

  get value0(): i32 {
    return this._call.outputValues[0].value.toI32();
  }

  get value1(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class UpdateStateOnLiquidationCall extends ethereum.Call {
  get inputs(): UpdateStateOnLiquidationCall__Inputs {
    return new UpdateStateOnLiquidationCall__Inputs(this);
  }

  get outputs(): UpdateStateOnLiquidationCall__Outputs {
    return new UpdateStateOnLiquidationCall__Outputs(this);
  }
}

export class UpdateStateOnLiquidationCall__Inputs {
  _call: UpdateStateOnLiquidationCall;

  constructor(call: UpdateStateOnLiquidationCall) {
    this._call = call;
  }

  get _principalReserve(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _collateralReserve(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _user(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _amountToLiquidate(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _collateralToLiquidate(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _feeLiquidated(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get _liquidatedCollateralForFee(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get _balanceIncrease(): BigInt {
    return this._call.inputValues[7].value.toBigInt();
  }

  get _liquidatorReceivesAToken(): boolean {
    return this._call.inputValues[8].value.toBoolean();
  }
}

export class UpdateStateOnLiquidationCall__Outputs {
  _call: UpdateStateOnLiquidationCall;

  constructor(call: UpdateStateOnLiquidationCall) {
    this._call = call;
  }
}

export class UpdateStateOnRebalanceCall extends ethereum.Call {
  get inputs(): UpdateStateOnRebalanceCall__Inputs {
    return new UpdateStateOnRebalanceCall__Inputs(this);
  }

  get outputs(): UpdateStateOnRebalanceCall__Outputs {
    return new UpdateStateOnRebalanceCall__Outputs(this);
  }
}

export class UpdateStateOnRebalanceCall__Inputs {
  _call: UpdateStateOnRebalanceCall;

  constructor(call: UpdateStateOnRebalanceCall) {
    this._call = call;
  }

  get _reserve(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _user(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _balanceIncrease(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class UpdateStateOnRebalanceCall__Outputs {
  _call: UpdateStateOnRebalanceCall;

  constructor(call: UpdateStateOnRebalanceCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SetUserUseReserveAsCollateralCall extends ethereum.Call {
  get inputs(): SetUserUseReserveAsCollateralCall__Inputs {
    return new SetUserUseReserveAsCollateralCall__Inputs(this);
  }

  get outputs(): SetUserUseReserveAsCollateralCall__Outputs {
    return new SetUserUseReserveAsCollateralCall__Outputs(this);
  }
}

export class SetUserUseReserveAsCollateralCall__Inputs {
  _call: SetUserUseReserveAsCollateralCall;

  constructor(call: SetUserUseReserveAsCollateralCall) {
    this._call = call;
  }

  get _reserve(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _user(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _useAsCollateral(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class SetUserUseReserveAsCollateralCall__Outputs {
  _call: SetUserUseReserveAsCollateralCall;

  constructor(call: SetUserUseReserveAsCollateralCall) {
    this._call = call;
  }
}

export class TransferToUserCall extends ethereum.Call {
  get inputs(): TransferToUserCall__Inputs {
    return new TransferToUserCall__Inputs(this);
  }

  get outputs(): TransferToUserCall__Outputs {
    return new TransferToUserCall__Outputs(this);
  }
}

export class TransferToUserCall__Inputs {
  _call: TransferToUserCall;

  constructor(call: TransferToUserCall) {
    this._call = call;
  }

  get _reserve(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _user(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferToUserCall__Outputs {
  _call: TransferToUserCall;

  constructor(call: TransferToUserCall) {
    this._call = call;
  }
}

export class TransferToFeeCollectionAddressCall extends ethereum.Call {
  get inputs(): TransferToFeeCollectionAddressCall__Inputs {
    return new TransferToFeeCollectionAddressCall__Inputs(this);
  }

  get outputs(): TransferToFeeCollectionAddressCall__Outputs {
    return new TransferToFeeCollectionAddressCall__Outputs(this);
  }
}

export class TransferToFeeCollectionAddressCall__Inputs {
  _call: TransferToFeeCollectionAddressCall;

  constructor(call: TransferToFeeCollectionAddressCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _user(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _destination(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class TransferToFeeCollectionAddressCall__Outputs {
  _call: TransferToFeeCollectionAddressCall;

  constructor(call: TransferToFeeCollectionAddressCall) {
    this._call = call;
  }
}

export class LiquidateFeeCall extends ethereum.Call {
  get inputs(): LiquidateFeeCall__Inputs {
    return new LiquidateFeeCall__Inputs(this);
  }

  get outputs(): LiquidateFeeCall__Outputs {
    return new LiquidateFeeCall__Outputs(this);
  }
}

export class LiquidateFeeCall__Inputs {
  _call: LiquidateFeeCall;

  constructor(call: LiquidateFeeCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _destination(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class LiquidateFeeCall__Outputs {
  _call: LiquidateFeeCall;

  constructor(call: LiquidateFeeCall) {
    this._call = call;
  }
}

export class TransferToReserveCall extends ethereum.Call {
  get inputs(): TransferToReserveCall__Inputs {
    return new TransferToReserveCall__Inputs(this);
  }

  get outputs(): TransferToReserveCall__Outputs {
    return new TransferToReserveCall__Outputs(this);
  }
}

export class TransferToReserveCall__Inputs {
  _call: TransferToReserveCall;

  constructor(call: TransferToReserveCall) {
    this._call = call;
  }

  get _reserve(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _user(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferToReserveCall__Outputs {
  _call: TransferToReserveCall;

  constructor(call: TransferToReserveCall) {
    this._call = call;
  }
}

export class RefreshConfigurationCall extends ethereum.Call {
  get inputs(): RefreshConfigurationCall__Inputs {
    return new RefreshConfigurationCall__Inputs(this);
  }

  get outputs(): RefreshConfigurationCall__Outputs {
    return new RefreshConfigurationCall__Outputs(this);
  }
}

export class RefreshConfigurationCall__Inputs {
  _call: RefreshConfigurationCall;

  constructor(call: RefreshConfigurationCall) {
    this._call = call;
  }
}

export class RefreshConfigurationCall__Outputs {
  _call: RefreshConfigurationCall;

  constructor(call: RefreshConfigurationCall) {
    this._call = call;
  }
}

export class InitReserveCall extends ethereum.Call {
  get inputs(): InitReserveCall__Inputs {
    return new InitReserveCall__Inputs(this);
  }

  get outputs(): InitReserveCall__Outputs {
    return new InitReserveCall__Outputs(this);
  }
}

export class InitReserveCall__Inputs {
  _call: InitReserveCall;

  constructor(call: InitReserveCall) {
    this._call = call;
  }

  get _reserve(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _aTokenAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _decimals(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _interestRateStrategyAddress(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class InitReserveCall__Outputs {
  _call: InitReserveCall;

  constructor(call: InitReserveCall) {
    this._call = call;
  }
}

export class RemoveLastAddedReserveCall extends ethereum.Call {
  get inputs(): RemoveLastAddedReserveCall__Inputs {
    return new RemoveLastAddedReserveCall__Inputs(this);
  }

  get outputs(): RemoveLastAddedReserveCall__Outputs {
    return new RemoveLastAddedReserveCall__Outputs(this);
  }
}

export class RemoveLastAddedReserveCall__Inputs {
  _call: RemoveLastAddedReserveCall;

  constructor(call: RemoveLastAddedReserveCall) {
    this._call = call;
  }

  get _reserveToRemove(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveLastAddedReserveCall__Outputs {
  _call: RemoveLastAddedReserveCall;

  constructor(call: RemoveLastAddedReserveCall) {
    this._call = call;
  }
}

export class SetReserveInterestRateStrategyAddressCall extends ethereum.Call {
  get inputs(): SetReserveInterestRateStrategyAddressCall__Inputs {
    return new SetReserveInterestRateStrategyAddressCall__Inputs(this);
  }

  get outputs(): SetReserveInterestRateStrategyAddressCall__Outputs {
    return new SetReserveInterestRateStrategyAddressCall__Outputs(this);
  }
}

export class SetReserveInterestRateStrategyAddressCall__Inputs {
  _call: SetReserveInterestRateStrategyAddressCall;

  constructor(call: SetReserveInterestRateStrategyAddressCall) {
    this._call = call;
  }

  get _reserve(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _rateStrategyAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SetReserveInterestRateStrategyAddressCall__Outputs {
  _call: SetReserveInterestRateStrategyAddressCall;

  constructor(call: SetReserveInterestRateStrategyAddressCall) {
    this._call = call;
  }
}

export class EnableBorrowingOnReserveCall extends ethereum.Call {
  get inputs(): EnableBorrowingOnReserveCall__Inputs {
    return new EnableBorrowingOnReserveCall__Inputs(this);
  }

  get outputs(): EnableBorrowingOnReserveCall__Outputs {
    return new EnableBorrowingOnReserveCall__Outputs(this);
  }
}

export class EnableBorrowingOnReserveCall__Inputs {
  _call: EnableBorrowingOnReserveCall;

  constructor(call: EnableBorrowingOnReserveCall) {
    this._call = call;
  }

  get _reserve(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _stableBorrowRateEnabled(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class EnableBorrowingOnReserveCall__Outputs {
  _call: EnableBorrowingOnReserveCall;

  constructor(call: EnableBorrowingOnReserveCall) {
    this._call = call;
  }
}

export class DisableBorrowingOnReserveCall extends ethereum.Call {
  get inputs(): DisableBorrowingOnReserveCall__Inputs {
    return new DisableBorrowingOnReserveCall__Inputs(this);
  }

  get outputs(): DisableBorrowingOnReserveCall__Outputs {
    return new DisableBorrowingOnReserveCall__Outputs(this);
  }
}

export class DisableBorrowingOnReserveCall__Inputs {
  _call: DisableBorrowingOnReserveCall;

  constructor(call: DisableBorrowingOnReserveCall) {
    this._call = call;
  }

  get _reserve(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class DisableBorrowingOnReserveCall__Outputs {
  _call: DisableBorrowingOnReserveCall;

  constructor(call: DisableBorrowingOnReserveCall) {
    this._call = call;
  }
}

export class EnableReserveAsCollateralCall extends ethereum.Call {
  get inputs(): EnableReserveAsCollateralCall__Inputs {
    return new EnableReserveAsCollateralCall__Inputs(this);
  }

  get outputs(): EnableReserveAsCollateralCall__Outputs {
    return new EnableReserveAsCollateralCall__Outputs(this);
  }
}

export class EnableReserveAsCollateralCall__Inputs {
  _call: EnableReserveAsCollateralCall;

  constructor(call: EnableReserveAsCollateralCall) {
    this._call = call;
  }

  get _reserve(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _baseLTVasCollateral(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _liquidationThreshold(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _liquidationBonus(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class EnableReserveAsCollateralCall__Outputs {
  _call: EnableReserveAsCollateralCall;

  constructor(call: EnableReserveAsCollateralCall) {
    this._call = call;
  }
}

export class DisableReserveAsCollateralCall extends ethereum.Call {
  get inputs(): DisableReserveAsCollateralCall__Inputs {
    return new DisableReserveAsCollateralCall__Inputs(this);
  }

  get outputs(): DisableReserveAsCollateralCall__Outputs {
    return new DisableReserveAsCollateralCall__Outputs(this);
  }
}

export class DisableReserveAsCollateralCall__Inputs {
  _call: DisableReserveAsCollateralCall;

  constructor(call: DisableReserveAsCollateralCall) {
    this._call = call;
  }

  get _reserve(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class DisableReserveAsCollateralCall__Outputs {
  _call: DisableReserveAsCollateralCall;

  constructor(call: DisableReserveAsCollateralCall) {
    this._call = call;
  }
}

export class EnableReserveStableBorrowRateCall extends ethereum.Call {
  get inputs(): EnableReserveStableBorrowRateCall__Inputs {
    return new EnableReserveStableBorrowRateCall__Inputs(this);
  }

  get outputs(): EnableReserveStableBorrowRateCall__Outputs {
    return new EnableReserveStableBorrowRateCall__Outputs(this);
  }
}

export class EnableReserveStableBorrowRateCall__Inputs {
  _call: EnableReserveStableBorrowRateCall;

  constructor(call: EnableReserveStableBorrowRateCall) {
    this._call = call;
  }

  get _reserve(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class EnableReserveStableBorrowRateCall__Outputs {
  _call: EnableReserveStableBorrowRateCall;

  constructor(call: EnableReserveStableBorrowRateCall) {
    this._call = call;
  }
}

export class DisableReserveStableBorrowRateCall extends ethereum.Call {
  get inputs(): DisableReserveStableBorrowRateCall__Inputs {
    return new DisableReserveStableBorrowRateCall__Inputs(this);
  }

  get outputs(): DisableReserveStableBorrowRateCall__Outputs {
    return new DisableReserveStableBorrowRateCall__Outputs(this);
  }
}

export class DisableReserveStableBorrowRateCall__Inputs {
  _call: DisableReserveStableBorrowRateCall;

  constructor(call: DisableReserveStableBorrowRateCall) {
    this._call = call;
  }

  get _reserve(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class DisableReserveStableBorrowRateCall__Outputs {
  _call: DisableReserveStableBorrowRateCall;

  constructor(call: DisableReserveStableBorrowRateCall) {
    this._call = call;
  }
}

export class ActivateReserveCall extends ethereum.Call {
  get inputs(): ActivateReserveCall__Inputs {
    return new ActivateReserveCall__Inputs(this);
  }

  get outputs(): ActivateReserveCall__Outputs {
    return new ActivateReserveCall__Outputs(this);
  }
}

export class ActivateReserveCall__Inputs {
  _call: ActivateReserveCall;

  constructor(call: ActivateReserveCall) {
    this._call = call;
  }

  get _reserve(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ActivateReserveCall__Outputs {
  _call: ActivateReserveCall;

  constructor(call: ActivateReserveCall) {
    this._call = call;
  }
}

export class DeactivateReserveCall extends ethereum.Call {
  get inputs(): DeactivateReserveCall__Inputs {
    return new DeactivateReserveCall__Inputs(this);
  }

  get outputs(): DeactivateReserveCall__Outputs {
    return new DeactivateReserveCall__Outputs(this);
  }
}

export class DeactivateReserveCall__Inputs {
  _call: DeactivateReserveCall;

  constructor(call: DeactivateReserveCall) {
    this._call = call;
  }

  get _reserve(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class DeactivateReserveCall__Outputs {
  _call: DeactivateReserveCall;

  constructor(call: DeactivateReserveCall) {
    this._call = call;
  }
}

export class FreezeReserveCall extends ethereum.Call {
  get inputs(): FreezeReserveCall__Inputs {
    return new FreezeReserveCall__Inputs(this);
  }

  get outputs(): FreezeReserveCall__Outputs {
    return new FreezeReserveCall__Outputs(this);
  }
}

export class FreezeReserveCall__Inputs {
  _call: FreezeReserveCall;

  constructor(call: FreezeReserveCall) {
    this._call = call;
  }

  get _reserve(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class FreezeReserveCall__Outputs {
  _call: FreezeReserveCall;

  constructor(call: FreezeReserveCall) {
    this._call = call;
  }
}

export class UnfreezeReserveCall extends ethereum.Call {
  get inputs(): UnfreezeReserveCall__Inputs {
    return new UnfreezeReserveCall__Inputs(this);
  }

  get outputs(): UnfreezeReserveCall__Outputs {
    return new UnfreezeReserveCall__Outputs(this);
  }
}

export class UnfreezeReserveCall__Inputs {
  _call: UnfreezeReserveCall;

  constructor(call: UnfreezeReserveCall) {
    this._call = call;
  }

  get _reserve(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UnfreezeReserveCall__Outputs {
  _call: UnfreezeReserveCall;

  constructor(call: UnfreezeReserveCall) {
    this._call = call;
  }
}

export class SetReserveBaseLTVasCollateralCall extends ethereum.Call {
  get inputs(): SetReserveBaseLTVasCollateralCall__Inputs {
    return new SetReserveBaseLTVasCollateralCall__Inputs(this);
  }

  get outputs(): SetReserveBaseLTVasCollateralCall__Outputs {
    return new SetReserveBaseLTVasCollateralCall__Outputs(this);
  }
}

export class SetReserveBaseLTVasCollateralCall__Inputs {
  _call: SetReserveBaseLTVasCollateralCall;

  constructor(call: SetReserveBaseLTVasCollateralCall) {
    this._call = call;
  }

  get _reserve(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _ltv(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetReserveBaseLTVasCollateralCall__Outputs {
  _call: SetReserveBaseLTVasCollateralCall;

  constructor(call: SetReserveBaseLTVasCollateralCall) {
    this._call = call;
  }
}

export class SetReserveLiquidationThresholdCall extends ethereum.Call {
  get inputs(): SetReserveLiquidationThresholdCall__Inputs {
    return new SetReserveLiquidationThresholdCall__Inputs(this);
  }

  get outputs(): SetReserveLiquidationThresholdCall__Outputs {
    return new SetReserveLiquidationThresholdCall__Outputs(this);
  }
}

export class SetReserveLiquidationThresholdCall__Inputs {
  _call: SetReserveLiquidationThresholdCall;

  constructor(call: SetReserveLiquidationThresholdCall) {
    this._call = call;
  }

  get _reserve(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _threshold(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetReserveLiquidationThresholdCall__Outputs {
  _call: SetReserveLiquidationThresholdCall;

  constructor(call: SetReserveLiquidationThresholdCall) {
    this._call = call;
  }
}

export class SetReserveLiquidationBonusCall extends ethereum.Call {
  get inputs(): SetReserveLiquidationBonusCall__Inputs {
    return new SetReserveLiquidationBonusCall__Inputs(this);
  }

  get outputs(): SetReserveLiquidationBonusCall__Outputs {
    return new SetReserveLiquidationBonusCall__Outputs(this);
  }
}

export class SetReserveLiquidationBonusCall__Inputs {
  _call: SetReserveLiquidationBonusCall;

  constructor(call: SetReserveLiquidationBonusCall) {
    this._call = call;
  }

  get _reserve(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _bonus(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetReserveLiquidationBonusCall__Outputs {
  _call: SetReserveLiquidationBonusCall;

  constructor(call: SetReserveLiquidationBonusCall) {
    this._call = call;
  }
}

export class SetReserveDecimalsCall extends ethereum.Call {
  get inputs(): SetReserveDecimalsCall__Inputs {
    return new SetReserveDecimalsCall__Inputs(this);
  }

  get outputs(): SetReserveDecimalsCall__Outputs {
    return new SetReserveDecimalsCall__Outputs(this);
  }
}

export class SetReserveDecimalsCall__Inputs {
  _call: SetReserveDecimalsCall;

  constructor(call: SetReserveDecimalsCall) {
    this._call = call;
  }

  get _reserve(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _decimals(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetReserveDecimalsCall__Outputs {
  _call: SetReserveDecimalsCall;

  constructor(call: SetReserveDecimalsCall) {
    this._call = call;
  }
}
