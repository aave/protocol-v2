// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class DefaultReserveInterestRateStrategy__calculateInterestRatesResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class DefaultReserveInterestRateStrategy extends ethereum.SmartContract {
  static bind(address: Address): DefaultReserveInterestRateStrategy {
    return new DefaultReserveInterestRateStrategy(
      "DefaultReserveInterestRateStrategy",
      address
    );
  }

  EXCESS_UTILIZATION_RATE(): BigInt {
    let result = super.call(
      "EXCESS_UTILIZATION_RATE",
      "EXCESS_UTILIZATION_RATE():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_EXCESS_UTILIZATION_RATE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "EXCESS_UTILIZATION_RATE",
      "EXCESS_UTILIZATION_RATE():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  OPTIMAL_UTILIZATION_RATE(): BigInt {
    let result = super.call(
      "OPTIMAL_UTILIZATION_RATE",
      "OPTIMAL_UTILIZATION_RATE():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_OPTIMAL_UTILIZATION_RATE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "OPTIMAL_UTILIZATION_RATE",
      "OPTIMAL_UTILIZATION_RATE():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  addressesProvider(): Address {
    let result = super.call(
      "addressesProvider",
      "addressesProvider():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_addressesProvider(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "addressesProvider",
      "addressesProvider():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  baseVariableBorrowRate(): BigInt {
    let result = super.call(
      "baseVariableBorrowRate",
      "baseVariableBorrowRate():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_baseVariableBorrowRate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "baseVariableBorrowRate",
      "baseVariableBorrowRate():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  reserve(): Address {
    let result = super.call("reserve", "reserve():(address)", []);

    return result[0].toAddress();
  }

  try_reserve(): ethereum.CallResult<Address> {
    let result = super.tryCall("reserve", "reserve():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  stableRateSlope1(): BigInt {
    let result = super.call(
      "stableRateSlope1",
      "stableRateSlope1():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_stableRateSlope1(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "stableRateSlope1",
      "stableRateSlope1():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  stableRateSlope2(): BigInt {
    let result = super.call(
      "stableRateSlope2",
      "stableRateSlope2():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_stableRateSlope2(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "stableRateSlope2",
      "stableRateSlope2():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  variableRateSlope1(): BigInt {
    let result = super.call(
      "variableRateSlope1",
      "variableRateSlope1():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_variableRateSlope1(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "variableRateSlope1",
      "variableRateSlope1():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  variableRateSlope2(): BigInt {
    let result = super.call(
      "variableRateSlope2",
      "variableRateSlope2():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_variableRateSlope2(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "variableRateSlope2",
      "variableRateSlope2():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getBaseVariableBorrowRate(): BigInt {
    let result = super.call(
      "getBaseVariableBorrowRate",
      "getBaseVariableBorrowRate():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getBaseVariableBorrowRate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getBaseVariableBorrowRate",
      "getBaseVariableBorrowRate():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getVariableRateSlope1(): BigInt {
    let result = super.call(
      "getVariableRateSlope1",
      "getVariableRateSlope1():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getVariableRateSlope1(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getVariableRateSlope1",
      "getVariableRateSlope1():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getVariableRateSlope2(): BigInt {
    let result = super.call(
      "getVariableRateSlope2",
      "getVariableRateSlope2():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getVariableRateSlope2(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getVariableRateSlope2",
      "getVariableRateSlope2():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getStableRateSlope1(): BigInt {
    let result = super.call(
      "getStableRateSlope1",
      "getStableRateSlope1():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getStableRateSlope1(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getStableRateSlope1",
      "getStableRateSlope1():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getStableRateSlope2(): BigInt {
    let result = super.call(
      "getStableRateSlope2",
      "getStableRateSlope2():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getStableRateSlope2(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getStableRateSlope2",
      "getStableRateSlope2():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  calculateInterestRates(
    _reserve: Address,
    _availableLiquidity: BigInt,
    _totalBorrowsStable: BigInt,
    _totalBorrowsVariable: BigInt,
    _averageStableBorrowRate: BigInt
  ): DefaultReserveInterestRateStrategy__calculateInterestRatesResult {
    let result = super.call(
      "calculateInterestRates",
      "calculateInterestRates(address,uint256,uint256,uint256,uint256):(uint256,uint256,uint256)",
      [
        ethereum.Value.fromAddress(_reserve),
        ethereum.Value.fromUnsignedBigInt(_availableLiquidity),
        ethereum.Value.fromUnsignedBigInt(_totalBorrowsStable),
        ethereum.Value.fromUnsignedBigInt(_totalBorrowsVariable),
        ethereum.Value.fromUnsignedBigInt(_averageStableBorrowRate)
      ]
    );

    return new DefaultReserveInterestRateStrategy__calculateInterestRatesResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_calculateInterestRates(
    _reserve: Address,
    _availableLiquidity: BigInt,
    _totalBorrowsStable: BigInt,
    _totalBorrowsVariable: BigInt,
    _averageStableBorrowRate: BigInt
  ): ethereum.CallResult<
    DefaultReserveInterestRateStrategy__calculateInterestRatesResult
  > {
    let result = super.tryCall(
      "calculateInterestRates",
      "calculateInterestRates(address,uint256,uint256,uint256,uint256):(uint256,uint256,uint256)",
      [
        ethereum.Value.fromAddress(_reserve),
        ethereum.Value.fromUnsignedBigInt(_availableLiquidity),
        ethereum.Value.fromUnsignedBigInt(_totalBorrowsStable),
        ethereum.Value.fromUnsignedBigInt(_totalBorrowsVariable),
        ethereum.Value.fromUnsignedBigInt(_averageStableBorrowRate)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DefaultReserveInterestRateStrategy__calculateInterestRatesResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _reserve(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _provider(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _baseVariableBorrowRate(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _variableRateSlope1(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _variableRateSlope2(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _stableRateSlope1(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get _stableRateSlope2(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}
