// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AnswerUpdated extends ethereum.Event {
  get params(): AnswerUpdated__Params {
    return new AnswerUpdated__Params(this);
  }
}

export class AnswerUpdated__Params {
  _event: AnswerUpdated;

  constructor(event: AnswerUpdated) {
    this._event = event;
  }

  get current(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get roundId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get timestamp(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class IExtendedPriceAggregator extends ethereum.SmartContract {
  static bind(address: Address): IExtendedPriceAggregator {
    return new IExtendedPriceAggregator("IExtendedPriceAggregator", address);
  }

  getToken(): Address {
    let result = super.call("getToken", "getToken():(address)", []);

    return result[0].toAddress();
  }

  try_getToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("getToken", "getToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getTokenType(): BigInt {
    let result = super.call("getTokenType", "getTokenType():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getTokenType(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getTokenType", "getTokenType():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPlatformId(): BigInt {
    let result = super.call("getPlatformId", "getPlatformId():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getPlatformId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getPlatformId",
      "getPlatformId():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getSubTokens(): Array<Address> {
    let result = super.call("getSubTokens", "getSubTokens():(address[])", []);

    return result[0].toAddressArray();
  }

  try_getSubTokens(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getSubTokens",
      "getSubTokens():(address[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  latestAnswer(): BigInt {
    let result = super.call("latestAnswer", "latestAnswer():(int256)", []);

    return result[0].toBigInt();
  }

  try_latestAnswer(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("latestAnswer", "latestAnswer():(int256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}
