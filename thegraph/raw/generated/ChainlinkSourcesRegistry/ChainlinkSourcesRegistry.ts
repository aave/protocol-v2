// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AggregatorUpdated extends ethereum.Event {
  get params(): AggregatorUpdated__Params {
    return new AggregatorUpdated__Params(this);
  }
}

export class AggregatorUpdated__Params {
  _event: AggregatorUpdated;

  constructor(event: AggregatorUpdated) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get aggregator(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class ChainlinkSourcesRegistry extends ethereum.SmartContract {
  static bind(address: Address): ChainlinkSourcesRegistry {
    return new ChainlinkSourcesRegistry("ChainlinkSourcesRegistry", address);
  }

  REVISION(): BigInt {
    let result = super.call("REVISION", "REVISION():(uint256)", []);

    return result[0].toBigInt();
  }

  try_REVISION(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("REVISION", "REVISION():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  aggregatorsOfAssets(param0: Address): Address {
    let result = super.call(
      "aggregatorsOfAssets",
      "aggregatorsOfAssets(address):(address)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toAddress();
  }

  try_aggregatorsOfAssets(param0: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "aggregatorsOfAssets",
      "aggregatorsOfAssets(address):(address)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isManager(caller: Address): boolean {
    let result = super.call("isManager", "isManager(address):(bool)", [
      ethereum.Value.fromAddress(caller)
    ]);

    return result[0].toBoolean();
  }

  try_isManager(caller: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isManager", "isManager(address):(bool)", [
      ethereum.Value.fromAddress(caller)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class UpdateAggregatorsCall extends ethereum.Call {
  get inputs(): UpdateAggregatorsCall__Inputs {
    return new UpdateAggregatorsCall__Inputs(this);
  }

  get outputs(): UpdateAggregatorsCall__Outputs {
    return new UpdateAggregatorsCall__Outputs(this);
  }
}

export class UpdateAggregatorsCall__Inputs {
  _call: UpdateAggregatorsCall;

  constructor(call: UpdateAggregatorsCall) {
    this._call = call;
  }

  get assets(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get aggregators(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }
}

export class UpdateAggregatorsCall__Outputs {
  _call: UpdateAggregatorsCall;

  constructor(call: UpdateAggregatorsCall) {
    this._call = call;
  }
}
